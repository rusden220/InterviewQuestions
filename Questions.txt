Вопросы, рассмотренные  в проекте

1.	Сравнение строк по ссылки и по значению
	(CompareStringsByValueAndReferenc)

	* string str = "foo";
	string str2 = Console.ReadLine();//inserted foo
	Console.WriteLine($"(object)str == (object)str2 {(object)str == (object)str2}"); // false
	Console.WriteLine($"str == str2 {str == str2}"); // true

2.	Сколько строк будет храниться в памяти 
	string str = "foo";
	string str2 = str;
	(StringComparisonWithPoolIntern)

		* одна так как есть пул интернирования

3.	Различия между Dispose and Finalize
	(DifferencesBetweenDisposeAndFinalize)

		* finalize - /*~className()*/ вызывается CLR
		* Dispose вызывается при использовании using() или самим пользователем

4.	В какую сторону парсится строка, и что будет выведено на экран
	result = $"{array[i]} = {array[++i]}";			
	(DirectionOfStringParsing)

	* слева на право
	на экране будет в начале array[i]
	затем array[i + 1]
5.	Что происходит с приватными полями классов при наследовании 
	(AccessToPrivateFieldInDescendantClass)

	* они наследуются, но доступа к ним нет. Напрямую через рефлексию тоже(только если просмотреть все BaseType). Только при чтении памяти напрямую или метод класса родителя

6.	От чего наследуются все структуры
	(смотри IL код любой структуры например QuestionData)

	* System.ValueType так как он переопределяет базовый класс для структур 
	внутри IL кода будет такая строка
	.class public sequential ansi sealed beforefieldinit InterviewQuestions.Questions.QuestionData extends [mscorlib]System.ValueType

7.	что возвращает string.Empty
	(GetStringEmpty)
	*пустую строку длинной 0 ""


8.	Отличие override от new
	(DifferencesBetweenOverrideAndNew)
	
	* Отличие что override полностью скрывает реализацию в классе родителе, а new нет, то есть метод переопределённый через new не будет скрывать реализацию в родителе, и будет вызвать именно её, а не из класса наследника
	
		class Parent
		{ virtual void todo() { Console.WriteLine("Parent"); } }
		class Child : Parent
		{ override void todo() { Console.WriteLine("Child");} }
		
		При вызове метода todo вот что будет
		child.todo(); // Child
		((Parent)child).todo(); // Child

		Но если реализовать через new
		class Child : Parent { new void todo(){ Console.WriteLine("Child");} }

		То при вызове будет по другому
		child.todo(); // Parent
		((Parent)child).todo(); // Parent

	* Так же разница будет если для создания класса потомка был использован класс родитель
		Parent child = new Child();
		//при override будет Child
		//при new будет Prent
		//при замещении(без virtual) будет всё равно Parent

	* ключевое слово override нельзя использовать без virtual, override or abstract, new можно, так как оно позволяет скрывать реализацию двух методов с одинаковым  названием в классе родителе и потомке

9.	Переопределение двух разных типов к одному интерфейсу и обратно
		public interface IInterface { void ToDo(); }
		public class C1: IInterface
		{
			public int GetNum() { return 0; }
			public void ToDo() { }
		}
		public class C2 : IInterface
		{
			public void ToDo() {}
			public string GetString() { return string.Empty; }
		}
		C1 c1 = new C1();
		C2 c2 = new C2();
		MakeTest((C1)(IInterface)c2);
		private void MakeTest(C1 c1){} 
		что будет

		* ошибка во время выполнения, так как приветит тип с2 к с1 невозможно

10. Как будет очищена память если не отписаться от события



Без проверки через код

1.	От чего наследуются все классы

	* От базового класса System.Object

2.	Псевдонимы(alias) Отличие String и string

	* отличий нет, string это ключевое слово - псевдоним, по внутренней реализации совершенно никаких

3. 	Generic–коллекции в C# и интерфейсы, связанные с ними. Отличие generic-коллекций от обычных.
	* Generic это шаблоны
	* остальные нет используют object Пример(ArrayList, Hashtable, Stack и Queue)

4.	Опишите сходства и различия между классами HashSet и Dictionary в разрезе предназначения и алгоритмов лежащих в основе реализации классов.

	* HashSet<T> - обобщенная коллекция; использует алгоритмы хеширования; быстро выполняется метод Contains; не хранит дубликаты и молча их игнорирует, при добавлении; не возможен доступ к элементу по позиции; элементы не упорядочены.

	* Dictionary<K,V> - обобщенная коллекция; элементы коллекции представляют пары ключ/значение; возможен доступ к элементу по позиции и по ключу; в случаи добавления используя индекс, ключ дублируется - элемент обновляется, если использовать метод Add - возникает исключение; элементы упорядочены

5.	Отличие HashSet от Hashtable.
	
	* Первый generic, второй нет
	* hashtable использует key - value pair, hashset получает хэш из хэш функции

6.	В чём отличия при между IEnumerable<T> и IQueryable<T> при работе с удаленной БД?

	* Разница в том, что будет выполнено на уровне бд, а что на уровне пользователя. 

	IEnumerable<Student> students = myOrm.GetStudents();
	var oldStudents = students.Where(st => st.Age > 25).ToList(); 
 	//код на сервере: select * from students
 	
 	IQueryable<Student> students = myOrm.GetStudents();
	var oldStudents = students.Where(st => st.Age > 25).ToList();
	//код на сервере select * from students where age > 25

7. 	Есть ли такой сценарий, при котором ValueType переменная уступит в производительности ссылочной переменной?

	* boxing/unboxing
	* при вызове аргументов, либо всё копируется, либо ссылка

	//вопрос возникает потому что переменные значимого типа хранятся в стеке и выделение памяти в практически не занимает времени(изменение значения мощности и запись данных), а при работе с кучей происходит частая дефрагментация и это накладывает дополнительные расходы

8. 	Никто не заставляет делать статические классы, все зависит от разработчика, но в каком случае мы не можем обойтись без них?
	
	* при работе с физическим ресурсом, при описание доступа к нему //не обязательно статический класс
	* при создании методов расширения

9.	Множественное наследование на C#?

	* никак, C# не поддерживает множественное наследование

10.	отличие equals от == 

	* отличий нет, оба сравнивают по ссылки(ссылочные типы), но если оба будут null в equals будет NullReferenceException, а в == true
	* так же, стоит отметить, что сравнение побитовое, в тех случаях, если используется структура, в которой нет ссылочных типов, иначе используется не глубокое сравнение по каждому полю.	

11. Отличие String от StringBuilder
	
	* при добавлении в string значения, создаётся новая строка в памяти, при использовании StringBuilder изменяется существующий массив данных

12.	В каких случаях в C# может возникнуть утечка памяти(memory leak)
	
	* при многократном изменении строк 
	* при создании собственного аллокатора
	* если использовать большое количество статик полей в классах
	* при подписи на событие и отсутствием его отписки

13. Отличия событий от делегатов
	
	* делегат это класс, event это некая обёртка над функционалом делегата 
	* у событий есть два метода add и remove у делегатов нет.
	* event для работы создаёт скрытое поле с делегатом, где хранятся все вызываемые функции
	* От делегата можно создать переменную, от события нет.
	* add и remove содержат в себе lock у делегата он отсутсвует

14.	Ключевое слово global что это и зачем

	* для обеспечения обеспечения доступа к классу без namespace'a 

15.	Класс без namespace'a где хранится, может ли существовать
	
	* да, может существовать
	* доступ будет по ключевому слову global::<className>
	* у него нет namespace'a new ClassWithoutNamespace().GetType().Namespace вернёт null
